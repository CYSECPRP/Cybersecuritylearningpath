#!/usr/bin/env python3
"""
Web Vulnerability Scanner v1.0 - Advanced Security Assessment Tool
Created by: [Your Name] - Cybersecurity Professional
Purpose: Automated web application security testing
Capabilities: HTTP analysis, common vulnerability detection, security headers audit
"""

import requests
import urllib3
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
import re
from datetime import datetime
import sys
import json

# Disable SSL warnings for testing
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class WebVulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'WebVulnScanner/1.0 (Security Assessment Tool)'
        })
        self.vulnerabilities = []
        self.scan_results = {}
        
    def banner(self):
        """Display professional scanner banner"""
        print("=" * 60)
        print("üï∑Ô∏è  WEB VULNERABILITY SCANNER v1.0")
        print("    Professional Security Assessment Tool")
        print("=" * 60)
        print(f"Target: {self.target_url}")
        print(f"Scan started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("-" * 60)
    
    def check_connectivity(self):
        """Test target connectivity and basic info gathering"""
        print("üîç Phase 1: Target Analysis & Connectivity")
        try:
            response = self.session.get(self.target_url, timeout=10, verify=False)
            
            print(f"‚úÖ Target reachable - Status Code: {response.status_code}")
            print(f"üìä Response Time: {response.elapsed.total_seconds():.2f}s")
            print(f"üåê Server: {response.headers.get('Server', 'Unknown')}")
            print(f"üîß Technology: {response.headers.get('X-Powered-By', 'Unknown')}")
            
            self.scan_results['connectivity'] = {
                'status_code': response.status_code,
                'response_time': response.elapsed.total_seconds(),
                'server': response.headers.get('Server', 'Unknown'),
                'technology': response.headers.get('X-Powered-By', 'Unknown')
            }
            
            return response
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Target unreachable: {e}")
            return None
    
    def security_headers_audit(self, response):
        """Audit security headers implementation"""
        print("\nüõ°Ô∏è  Phase 2: Security Headers Analysis")
        
        # Critical security headers
        security_headers = {
            'Content-Security-Policy': 'CSP - Prevents XSS attacks',
            'X-Frame-Options': 'Clickjacking protection',
            'X-Content-Type-Options': 'MIME type sniffing prevention', 
            'Strict-Transport-Security': 'HTTPS enforcement',
            'X-XSS-Protection': 'Browser XSS filtering',
            'Referrer-Policy': 'Referrer information control',
            'Permissions-Policy': 'Browser feature permissions'
        }
        
        missing_headers = []
        present_headers = []
        
        for header, description in security_headers.items():
            if header in response.headers:
                print(f"‚úÖ {header}: {response.headers[header]}")
                present_headers.append(header)
            else:
                print(f"‚ùå Missing: {header} - {description}")
                missing_headers.append(header)
                self.vulnerabilities.append({
                    'type': 'Missing Security Header',
                    'details': f"Missing {header} - {description}",
                    'severity': 'Medium'
                })
        
        self.scan_results['security_headers'] = {
            'present': present_headers,
            'missing': missing_headers
        }
    
    def directory_enumeration(self):
        """Enumerate common directories and files"""
        print("\nüìÇ Phase 3: Directory & File Enumeration")
        
        common_paths = [
            'admin/', 'administrator/', 'login/', 'dashboard/',
            'config/', 'backup/', 'test/', 'dev/', 'staging/',
            'robots.txt', 'sitemap.xml', '.htaccess', 'web.config',
            'phpinfo.php', 'info.php', 'test.php', 'debug.php',
            'wp-admin/', 'wp-config.php', 'wp-content/',
            '.git/', '.svn/', '.env', 'config.json'
        ]
        
        found_paths = []
        
        for path in common_paths:
            url = urljoin(self.target_url, path)
            try:
                response = self.session.get(url, timeout=5, verify=False)
                if response.status_code == 200:
                    print(f"‚úÖ Found: {path} (Status: {response.status_code})")
                    found_paths.append({
                        'path': path,
                        'status': response.status_code,
                        'size': len(response.content)
                    })
                    
                    # Check for sensitive information exposure
                    if path in ['.env', 'config.json', 'web.config']:
                        self.vulnerabilities.append({
                            'type': 'Information Disclosure',
                            'details': f"Sensitive file accessible: {path}",
                            'severity': 'High'
                        })
                        
                elif response.status_code == 403:
                    print(f"‚ö†Ô∏è  Forbidden: {path} (exists but access denied)")
                    found_paths.append({
                        'path': path,
                        'status': response.status_code,
                        'note': 'Access denied'
                    })
                    
            except requests.exceptions.RequestException:
                pass  # Path not found or error
        
        self.scan_results['enumeration'] = found_paths
        print(f"üìä Directory scan complete: {len(found_paths)} items found")
    
    def form_analysis(self, response):
        """Analyze forms for potential vulnerabilities"""
        print("\nüìù Phase 4: Form Security Analysis")
        
        soup = BeautifulSoup(response.content, 'html.parser')
        forms = soup.find_all('form')
        
        if not forms:
            print("‚ÑπÔ∏è  No forms detected on main page")
            return
        
        print(f"üîç Analyzing {len(forms)} form(s)")
        
        for i, form in enumerate(forms):
            print(f"\nüìã Form {i+1}:")
            
            # Form method analysis
            method = form.get('method', 'GET').upper()
            action = form.get('action', '')
            
            print(f"   Method: {method}")
            print(f"   Action: {action if action else '(same page)'}")
            
            # Input field analysis
            inputs = form.find_all(['input', 'textarea', 'select'])
            print(f"   Input fields: {len(inputs)}")
            
            # Security checks
            csrf_token = form.find('input', {'name': re.compile('csrf|token', re.I)})
            if csrf_token:
                print("   ‚úÖ CSRF protection detected")
            else:
                print("   ‚ùå No CSRF protection found")
                self.vulnerabilities.append({
                    'type': 'Missing CSRF Protection',
                    'details': f"Form {i+1} lacks CSRF token",
                    'severity': 'Medium'
                })
            
            # Password field analysis
            password_fields = form.find_all('input', {'type': 'password'})
            if password_fields:
                if form.get('method', '').upper() != 'POST':
                    self.vulnerabilities.append({
                        'type': 'Insecure Form Method',
                        'details': f"Password form using {method} instead of POST",
                        'severity': 'High'
                    })
    
    def ssl_analysis(self):
        """Analyze SSL/TLS configuration"""
        print("\nüîí Phase 5: SSL/TLS Security Analysis")
        
        if not self.target_url.startswith('https://'):
            print("‚ùå Site not using HTTPS - data transmitted in plaintext")
            self.vulnerabilities.append({
                'type': 'No HTTPS',
                'details': 'Website not using encrypted connection',
                'severity': 'High'
            })
            return
        
        try:
            response = self.session.get(self.target_url, verify=True, timeout=10)
            print("‚úÖ Valid SSL certificate")
        except requests.exceptions.SSLError as e:
            print(f"‚ùå SSL Certificate issue: {e}")
            self.vulnerabilities.append({
                'type': 'SSL Certificate Problem',
                'details': str(e),
                'severity': 'High'
            })
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  SSL verification error: {e}")
    
    def technology_fingerprinting(self, response):
        """Identify technologies and potential version vulnerabilities"""
        print("\nüîç Phase 6: Technology Fingerprinting")
        
        technologies = {}
        
        # Server header analysis
        server = response.headers.get('Server', '')
        if server:
            technologies['server'] = server
            print(f"üñ•Ô∏è  Server: {server}")
        
        # Technology headers
        powered_by = response.headers.get('X-Powered-By', '')
        if powered_by:
            technologies['powered_by'] = powered_by
            print(f"‚ö° Powered by: {powered_by}")
        
        # Content analysis for technology detection
        content = response.text.lower()
        
        # Common technology signatures
        tech_signatures = {
            'WordPress': ['wp-content', 'wp-includes', '/wp-json/'],
            'Drupal': ['drupal.js', 'sites/default', '/node/'],
            'Joomla': ['joomla', '/media/jui/', 'option=com_'],
            'PHP': ['<?php', '.php', 'phpsessionid'],
            'ASP.NET': ['aspnet', '__viewstate', 'ctl00'],
            'Apache': ['apache', 'server: apache'],
            'Nginx': ['nginx', 'server: nginx'],
            'jQuery': ['jquery', '$.'],
            'Bootstrap': ['bootstrap', 'btn-', 'container-fluid']
        }
        
        detected_tech = []
        for tech, signatures in tech_signatures.items():
            if any(sig in content for sig in signatures):
                detected_tech.append(tech)
                print(f"üîß Detected: {tech}")
        
        technologies['detected'] = detected_tech
        self.scan_results['technologies'] = technologies
    
    def vulnerability_summary(self):
        """Generate vulnerability assessment report"""
        print("\n" + "=" * 60)
        print("üìä VULNERABILITY ASSESSMENT REPORT")
        print("=" * 60)
        
        if not self.vulnerabilities:
            print("‚úÖ No obvious vulnerabilities detected!")
            print("   Note: This is a basic scan - professional tools may find more")
        else:
            print(f"‚ö†Ô∏è  {len(self.vulnerabilities)} potential issues found:")
            
            # Group by severity
            high = [v for v in self.vulnerabilities if v['severity'] == 'High']
            medium = [v for v in self.vulnerabilities if v['severity'] == 'Medium']
            low = [v for v in self.vulnerabilities if v['severity'] == 'Low']
            
            if high:
                print(f"\nüî¥ HIGH SEVERITY ({len(high)}):")
                for vuln in high:
                    print(f"   ‚Ä¢ {vuln['type']}: {vuln['details']}")
            
            if medium:
                print(f"\nüü° MEDIUM SEVERITY ({len(medium)}):")
                for vuln in medium:
                    print(f"   ‚Ä¢ {vuln['type']}: {vuln['details']}")
            
            if low:
                print(f"\nüü¢ LOW SEVERITY ({len(low)}):")
                for vuln in low:
                    print(f"   ‚Ä¢ {vuln['type']}: {vuln['details']}")
        
        print(f"\nüïí Scan completed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Recommendations
        print(f"\nüí° SECURITY RECOMMENDATIONS:")
        print("   1. Implement missing security headers")
        print("   2. Enable HTTPS with valid certificates")
        print("   3. Add CSRF protection to all forms") 
        print("   4. Restrict access to sensitive directories")
        print("   5. Keep all software versions updated")
        print("   6. Implement proper input validation")
        print("   7. Regular security testing and monitoring")
    
    def save_report(self):
        """Save detailed scan report to file"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        domain = urlparse(self.target_url).netloc.replace('.', '_')
        filename = f"web_scan_{domain}_{timestamp}.json"
        
        report = {
            'target': self.target_url,
            'scan_time': datetime.now().isoformat(),
            'vulnerabilities': self.vulnerabilities,
            'scan_results': self.scan_results
        }
        
        with open(filename, 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"üíæ Detailed report saved: {filename}")
        return filename
    
    def run_full_scan(self):
        """Execute comprehensive web security assessment"""
        self.banner()
        
        # Phase 1: Connectivity
        response = self.check_connectivity()
        if not response:
            return False
        
        # Phase 2: Security Headers
        self.security_headers_audit(response)
        
        # Phase 3: Directory Enumeration
        self.directory_enumeration()
        
        # Phase 4: Form Analysis
        self.form_analysis(response)
        
        # Phase 5: SSL Analysis
        self.ssl_analysis()
        
        # Phase 6: Technology Detection
        self.technology_fingerprinting(response)
        
        # Phase 7: Report Generation
        self.vulnerability_summary()
        
        # Save detailed report
        self.save_report()
        
        return True

def main():
    """Main scanner execution"""
    if len(sys.argv) != 2:
        print("Usage: python3 web_vulnerability_scanner_v1.py <target_url>")
        print("Example: python3 web_vulnerability_scanner_v1.py https://example.com")
        sys.exit(1)
    
    target = sys.argv[1]
    
    # Validate URL format
    if not target.startswith(('http://', 'https://')):
        target = 'http://' + target
    
    # Initialize and run scanner
    scanner = WebVulnerabilityScanner(target)
    success = scanner.run_full_scan()
    
    if success:
        print(f"\nüéØ Web security assessment completed successfully!")
        print(f"   Target analyzed: {target}")
        print(f"   Professional-grade vulnerability detection performed")
    else:
        print(f"\n‚ùå Scan failed - check target URL and connectivity")

if __name__ == "__main__":
    main()
